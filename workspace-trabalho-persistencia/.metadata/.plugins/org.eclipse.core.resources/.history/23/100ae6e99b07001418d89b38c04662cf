package br.com.fiap.projetohibernate.concurrency;

import org.hibernate.LockMode;
import org.hibernate.Session;
import org.hibernate.Transaction;

import br.com.fiap.projetohibernate.datatypes.Item;
import br.com.fiap.projetohibernate.datatypes.Pedido;
import br.com.fiap.projetohibernate.util.HibernateUtil;

public class ItemDAOImpl {

	private Session session = null;
	private Transaction transaction = null;

	public void alterarItemLock(Item item) {
		
		try{
			
			// Obtemos a sessão conectando-se ao banco de dados
			session = HibernateUtil.getSessionFactory().getCurrentSession();
			
			// Abre a transação, após isso várias operações poderão ser executadas
			// e em caso de falhas a operação como inteiro é retornada ao seu estado inicial.
			transaction = session.beginTransaction();
			
			// Busca o Item na base e bloqueia ele para alteração
			Item itemResult = (Item) session.load(Item.class, item.getIdItem(), LockMode.READ);
			
			// Altera o valor do item
			itemResult.setValorItem(item.getValorItem());
			
			// Atualiza o item na base
			session.refresh(itemResult);
			
		} catch (Exception e){
			e.getMessage();
		}
		
	}
}
