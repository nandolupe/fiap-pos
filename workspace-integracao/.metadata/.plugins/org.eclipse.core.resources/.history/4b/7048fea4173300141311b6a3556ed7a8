package com.fiap.contamedica.gateway;

import java.util.Properties;

import javax.jms.JMSException;
import javax.jms.Queue;
import javax.jms.QueueConnection;
import javax.jms.QueueConnectionFactory;
import javax.jms.QueueSender;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

/**
 * Classe abstrata responsável em prover a comunicação com a queue,
 * ou seja, criar e fechar a conexão.
 * 
 * @author Luiz Fernando 
 *
 */
public abstract class QueueBase {

	public QueueBase() {}
	
	private Context jndiContext;
	private QueueConnectionFactory queueConnectionFactory;
	private Queue queue;
	QueueSender queueSender;
	
	protected  QueueConnection obterConexaoQueue(String nomeFila) {
		
		QueueConnection queueConnection = null;
		
		try {
			
			jndiContext = getInitial();
			queueConnectionFactory = (QueueConnectionFactory) jndiContext.lookup("ConnectionFactory");
			queue = (Queue) jndiContext.lookup(nomeFila);
			queueConnection = queueConnectionFactory.createQueueConnection();
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JMSException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return queueConnection;
	}
	
	protected void fecharConexao(QueueConnection queueConnection) {
		if (queueConnection != null) {
			try {
				queueConnection.close();
			} catch (JMSException e) {
			}
		}
	}
	
	private static InitialContext getInitial() throws Exception {
		Properties props = new Properties();
		props.setProperty("java.naming.factory.initial", "org.jnp.interfaces.NamingContextFactory");
		props.setProperty("java.naming.provider.url", "localhost:1099");
		props.setProperty("java.naming.factory.url.pkgs", "org.jboss.naming");
		InitialContext context = new InitialContext(props);
		return context;
	}

}
